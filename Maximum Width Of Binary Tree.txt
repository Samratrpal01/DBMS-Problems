662. Maximum Width of Binary Tree
Solved
Medium
Topics
premium lock icon
Companies
Given the root of a binary tree, return the maximum width of the given tree.

The maximum width of a tree is the maximum width among all levels.

The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.

It is guaranteed that the answer will in the range of a 32-bit signed integer.

 

Example 1:


Input: root = [1,3,2,5,3,null,9]
Output: 4
Explanation: The maximum width exists in the third level with length 4 (5,3,null,9).
Example 2:


Input: root = [1,3,2,5,null,null,9,6,null,7]
Output: 7
Explanation: The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).
Example 3:


Input: root = [1,3,2,5]
Output: 2
Explanation: The maximum width exists in the second level with length 2 (3,2).




public class Solution {
    public int WidthOfBinaryTree(TreeNode root) {
        if (root == null)
            return 0;

        int maxWidth = 0;
        var queue = new Queue<(TreeNode node, int index)>();
        queue.Enqueue((root, 0));

        while (queue.Count > 0) {
            int count = queue.Count;
            int minIndex = queue.Peek().index;  
            int first = 0, last = 0;

            for (int i = 0; i < count; i++) {
                var (node, index) = queue.Dequeue();
                int normalizedIndex = index - minIndex;

                if (i == 0) first = normalizedIndex;
                if (i == count - 1) last = normalizedIndex;

                if (node.left != null)
                    queue.Enqueue((node.left, 2 * normalizedIndex));
                if (node.right != null)
                    queue.Enqueue((node.right, 2 * normalizedIndex + 1));
            }

            maxWidth = Math.Max(maxWidth, last - first + 1);
        }

        return maxWidth;
    }
}